generator client {
  provider = "prisma-client-js"
  output   = "./out"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  INSTRUCTOR
}

model User {
  id              String   @id
  name            String
  email           String
  phone           String?
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  role            UserRole @default(USER)
  suspended       Boolean? @default(false)
  profileImageId  Int?
  enrolledClassId Int?     @unique
  profileImage    File?    @relation(fields: [profileImageId], references: [id])

  memberships     MembershipType  @default(USER)
  Session         Session[]
  Account         Account[]
  teachingClasses Class[]         @relation("InstructorClass")
  enrolledClass   Class?          @relation("StudentClass", fields: [enrolledClassId], references: [id])
  payments        Payment[]
  EquipmentUses   EquipmentUses[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}

model File {
  id        Int         @id @default(autoincrement())
  fileId    String
  url       String
  Class     Class[]
  User      User[]
  Equipment Equipment[]
}

model ClassCategory {
  id    Int     @id @default(autoincrement())
  title String
  desc  String?
  Class Class[]
}

model Class {
  id           Int    @id @default(autoincrement())
  title        String
  desc         String
  instructorId String @unique
  categoryId   Int
  duration     Int
  schedule     String
  coverImageId Int

  coverImage    File            @relation(fields: [coverImageId], references: [id])
  instructor    User            @relation("InstructorClass", fields: [instructorId], references: [id])
  category      ClassCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  students      User[]          @relation("StudentClass")
  EquipmentUses EquipmentUses[]
}

enum MembershipType {
  USER
  BASIC
  PRO
  ELIT
}

model Payment {
  id             String         @id @default(cuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  amount         Float
  currency       String         @default("usd")
  status         String 
  sessionId      String         @unique
  membershipType MembershipType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("payment")
}

model Equipment {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  desc          String
  imageId       Int
  image         File            @relation(fields: [imageId], references: [id])
  active        Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  remarks       String?
  EquipmentUses EquipmentUses[]
}

model EquipmentUses {
  id          Int       @id @default(autoincrement())
  equipmentId Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  startTime   DateTime
  endTime     DateTime
  remarks     String?
  createdAt   DateTime  @default(now())
  classId     Int
  class       Class     @relation(fields: [classId], references: [id])
}
