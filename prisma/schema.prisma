generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id
  name           String
  email          String
  emailVerified  Boolean
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  accountType    String    @default("user")
  profileImageId Int?
  profileImage   File?     @relation(fields: [profileImageId], references: [id])
  Session        Session[]
  Account        Account[]
  Class          Class[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}

model File {
  id     Int     @id @default(autoincrement())
  fileId String
  url    String
  Class  Class[]
  User   User[]
}

model ClassCategory {
  id    Int     @id @default(autoincrement())
  title String
  desc  String?
  Class Class[]
}

model Class {
  id           Int     @id @default(autoincrement())
  title        String
  desc         String?
  instructorId String
  categoryId   Int
  duration     Int
  schedule     String
  coverImageId Int?

  coverImage File?         @relation(fields: [coverImageId], references: [id])
  instructor User          @relation(fields: [instructorId], references: [id])
  category   ClassCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}
